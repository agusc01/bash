#!/bin/bash

# Function to execute commands and store their output
execute_command() {
    local cmd=$1
    last_outputs[$cmd]=$(eval fish -c "$cmd") # Execute the command and store the output
}

dbar() {
    # Define the commands with their update intervals in a single array
    commands=(
        "dbar_bluetooth:60"
        "dbar_wifi:60"
        "dbar_brightness:86400"
        "dbar_volume:86400"
        "dbar_microphone:60"
        "dbar_camera:60"
        "dbar_cpu:5"
        "dbar_thermal:10"
        "dbar_memory:5"
        "dbar_updates:600"
        "dbar_date:55"
        "dbar_battery:60"
    )

    # Initialize counters and last outputs for each command
    declare -A counters
    declare -A last_outputs
    for cmd in "${commands[@]}"; do
        IFS=':' read -r command interval <<<"$cmd"
        counters[$command]=0
        last_outputs[$command]=""
    done

    # Execute all commands initially
    for cmd in "${commands[@]}"; do
        IFS=':' read -r command interval <<<"$cmd"
        execute_command "$command"
    done

    # Main loop
    while true; do
        output=""
        for cmd in "${commands[@]}"; do
            IFS=':' read -r command interval <<<"$cmd"

            # Increment the counter for each command
            ((counters[$command]++))

            # Check if the command should be updated
            if ((counters[$command] >= interval)); then
                execute_command "$command" # Execute the corresponding function and store the output
                counters[$command]=0       # Reset the counter
            fi

            # Append the last output to the final output
            output+="${last_outputs[$command]}"
        done

        # Update the status bar
        xsetroot -name "$output"

        sleep 1 # Wait one second before the next iteration
    done
}

dbar &
echo $! >/tmp/dbar_pid
